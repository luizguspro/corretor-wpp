// src/services/messageService.js
const evolutionService = require('./evolutionService');
const messageTemplates = require('../utils/messageTemplates');
const { searchProperties, getPropertyById, getFeaturedProperties } = require('../data/realEstateData');

// Importar OpenAI apenas se estiver configurado
let openaiService = null;
if (process.env.OPENAI_API_KEY && process.env.ENABLE_AI_RESPONSES !== 'false') {
  try {
    openaiService = require('./openaiService');
    console.log('‚úÖ OpenAI configurado e carregado');
  } catch (error) {
    console.log('‚ö†Ô∏è OpenAI n√£o configurado, usando respostas padr√£o');
  }
}

// Simular banco de dados em mem√≥ria
const userSessions = new Map();
const userProfiles = new Map();
const scheduledVisits = new Map();

class MessageService {
  constructor() {
    this.menuOptions = {
      MAIN: 'main',
      BUYING: 'buying',
      SELLING: 'selling',
      RENTING: 'renting',
      SCHEDULE: 'schedule',
      CONTACT: 'contact',
      VIEWING_PROPERTY: 'viewing_property',
      LOCATION_SEARCH: 'location_search',
      AUDIO_RECEIVED: 'audio_received'
    };
    
    // Lista de agentes
    this.agents = [
      { name: 'Carlos Silva', phone: '48999887766', specialty: 'Vendas Alto Padr√£o' },
      { name: 'Ana Costa', phone: '48999776655', specialty: 'Loca√ß√£o' },
      { name: 'Roberto Santos', phone: '48999665544', specialty: 'Lan√ßamentos' }
    ];
  }
  
  // Processar mensagem recebida
  async processMessage(data) {
    console.log('\nüîç Processando mensagem...');
    
    if (!data || !data.key || !data.key.remoteJid) {
      console.log('‚ùå Dados inv√°lidos');
      return;
    }
    
    const { key, message, pushName } = data;
    const from = key.remoteJid;
    
    // Ignorar mensagens pr√≥prias em produ√ß√£o
    if (key.fromMe && process.env.NODE_ENV === 'production') {
      return;
    }
    
    // Ignorar grupos
    if (from.includes('@g.us')) {
      return;
    }
    
    // Obter sess√£o e perfil
    const session = this.getUserSession(from);
    const profile = this.getUserProfile(from, pushName);
    
    // Processar diferentes tipos de mensagem
    if (message) {
      try {
        if (message.audioMessage) {
          await this.handleAudioMessage(from, message.audioMessage, session, profile);
        } else if (message.conversation || message.extendedTextMessage?.text) {
          const text = message.conversation || message.extendedTextMessage.text;
          await this.handleTextMessage(from, text, session, profile);
        } else if (message.listResponseMessage) {
          await this.handleListResponse(from, message.listResponseMessage, session, profile);
        } else if (message.buttonsResponseMessage) {
          await this.handleButtonResponse(from, message.buttonsResponseMessage, session, profile);
        } else if (message.locationMessage) {
          await this.handleLocationMessage(from, message.locationMessage, session, profile);
        } else {
          console.log('‚ö†Ô∏è Tipo de mensagem n√£o reconhecido:', Object.keys(message));
        }
      } catch (error) {
        console.error('Erro ao processar mensagem:', error);
        await this.sendErrorMessage(from);
      }
    }
  }
  
  // Lidar com mensagens de √°udio
  async handleAudioMessage(from, audioMessage, session, profile) {
    try {
      await evolutionService.sendTextMessage(from, 'üé§ Recebendo seu √°udio...');
      
      // Verificar se OpenAI est√° dispon√≠vel
      if (!openaiService) {
        await evolutionService.sendTextMessage(
          from,
          'üòî Desculpe, a transcri√ß√£o de √°udio est√° temporariamente indispon√≠vel. Por favor, digite sua mensagem.'
        );
        return;
      }
      
      // Baixar √°udio
      const audioBuffer = Buffer.from(audioMessage.fileEncSha256, 'base64');
      
      // Transcrever com OpenAI
      const transcription = await openaiService.transcribeAudio(audioBuffer, 'ogg');
      
      await evolutionService.sendTextMessage(
        from, 
        `üìù Entendi: "${transcription}"\n\nProcessando sua solicita√ß√£o...`
      );
      
      // Processar como texto
      await this.handleTextMessage(from, transcription, session, profile);
      
    } catch (error) {
      console.error('Erro ao processar √°udio:', error);
      await evolutionService.sendTextMessage(
        from,
        'üòî Desculpe, n√£o consegui processar seu √°udio. Pode digitar sua mensagem?'
      );
    }
  }
  
  // Lidar com mensagens de texto com IA
  async handleTextMessage(from, text, session, profile) {
    const lowerText = text.toLowerCase().trim();
    
    // Analisar inten√ß√£o com OpenAI (se dispon√≠vel)
    let intent = { intent: 'other', propertyType: 'any', sentiment: 'neutral' };
    if (openaiService) {
      try {
        intent = await openaiService.analyzeIntent(text, { userId: from });
        console.log('Inten√ß√£o detectada:', intent);
      } catch (error) {
        console.log('Erro ao analisar inten√ß√£o, usando padr√£o:', error.message);
      }
    }
    
    // Atualizar perfil com base na an√°lise
    if (intent && intent.intent !== 'other') {
      this.updateUserProfile(from, intent);
    }
    
    // Primeira intera√ß√£o ou reset
    if (!session.started || lowerText === 'menu' || lowerText === 'in√≠cio' || lowerText === 'inicio') {
      await this.sendWelcomeMessage(from, profile.name);
      session.started = true;
      session.state = this.menuOptions.MAIN;
      return;
    }
    
    // Roteamento inteligente baseado em inten√ß√£o
    if (intent.intent === 'buy' && session.state === this.menuOptions.MAIN) {
      session.state = this.menuOptions.BUYING;
      await this.handleBuyingIntent(from, text, intent, session, profile);
      return;
    }
    
    if (intent.intent === 'rent' && session.state === this.menuOptions.MAIN) {
      session.state = this.menuOptions.RENTING;
      await this.handleRentingIntent(from, text, intent, session, profile);
      return;
    }
    
    // Processar baseado no estado atual
    switch (session.state) {
      case this.menuOptions.MAIN:
        await this.handleMainMenu(from, lowerText, session);
        break;
        
      case this.menuOptions.BUYING:
      case this.menuOptions.RENTING:
        await this.handlePropertySearch(from, text, intent, session, profile);
        break;
        
      case this.menuOptions.VIEWING_PROPERTY:
        await this.handlePropertyViewing(from, text, session, profile);
        break;
        
      case this.menuOptions.SCHEDULE:
        await this.handleScheduleFlow(from, text, session, profile);
        break;
        
      case this.menuOptions.SELLING:
        await this.handleSellingFlow(from, text, session, profile);
        break;
        
      case this.menuOptions.CONTACT:
        await this.handleContactFlow(from, text, session);
        break;
        
      default:
        await this.handleGeneralQuery(from, text, profile);
    }
  }
  
  // Lidar com inten√ß√£o de compra
  async handleBuyingIntent(from, text, intent, session, profile) {
    // Buscar im√≥veis baseado na an√°lise
    const filters = {
      transaction: 'sale',
      type: intent.propertyType !== 'any' ? intent.propertyType : null,
      minPrice: intent.priceRange?.min,
      maxPrice: intent.priceRange?.max,
      bedrooms: intent.bedrooms,
      city: intent.location
    };
    
    const properties = searchProperties(filters);
    
    if (properties.length > 0) {
      // Gerar sugest√µes personalizadas com IA
      let suggestions = null;
      if (openaiService) {
        try {
          suggestions = await openaiService.generatePersonalizedSuggestions(
            profile,
            properties.slice(0, 6)
          );
        } catch (error) {
          console.log('Erro ao gerar sugest√µes personalizadas');
        }
      }
      
      const introMessage = `üéØ Excelente! Baseado no que voc√™ me disse, encontrei ${properties.length} im√≥veis que podem te interessar.\n\n${suggestions || 'Vou te mostrar os melhores:'}`;
      
      await evolutionService.sendTextMessage(from, introMessage);
      
      // Enviar top 3 im√≥veis
      await this.delay(1500);
      await this.sendPropertyCarousel(from, properties.slice(0, 3), profile);
      
    } else {
      await this.sendNoResultsMessage(from, filters);
    }
  }
  
  // Lidar com inten√ß√£o de aluguel
  async handleRentingIntent(from, text, intent, session, profile) {
    // Similar ao buying mas com transaction: 'rent'
    const filters = {
      transaction: 'rent',
      type: intent.propertyType !== 'any' ? intent.propertyType : null,
      minPrice: intent.priceRange?.min,
      maxPrice: intent.priceRange?.max,
      bedrooms: intent.bedrooms,
      city: intent.location
    };
    
    const properties = searchProperties(filters);
    
    if (properties.length > 0) {
      await evolutionService.sendTextMessage(
        from,
        `üîë Encontrei ${properties.length} im√≥veis para alugar com suas caracter√≠sticas!`
      );
      
      await this.delay(1500);
      await this.sendPropertyCarousel(from, properties.slice(0, 3), profile);
    } else {
      await this.sendNoResultsMessage(from, filters);
    }
  }
  
  // Busca inteligente de im√≥veis
  async handlePropertySearch(from, text, intent, session, profile) {
    // Se j√° tem filtros na sess√£o, refinar busca
    if (session.searchFilters) {
      // Atualizar filtros com nova informa√ß√£o
      if (intent.priceRange?.max) session.searchFilters.maxPrice = intent.priceRange.max;
      if (intent.bedrooms) session.searchFilters.bedrooms = intent.bedrooms;
      if (intent.location) session.searchFilters.city = intent.location;
    } else {
      // Criar novos filtros
      session.searchFilters = {
        transaction: session.state === this.menuOptions.BUYING ? 'sale' : 'rent',
        type: intent.propertyType !== 'any' ? intent.propertyType : null,
        minPrice: intent.priceRange?.min,
        maxPrice: intent.priceRange?.max,
        bedrooms: intent.bedrooms,
        city: intent.location
      };
    }
    
    const properties = searchProperties(session.searchFilters);
    
    if (properties.length === 0) {
      await this.sendNoResultsMessage(from, session.searchFilters);
      return;
    }
    
    // Enviar resultados
    const responseBase = `Encontrei ${properties.length} im√≥veis com suas caracter√≠sticas! üè†`;
    let enhancedResponse = responseBase;
    
    if (openaiService) {
      try {
        enhancedResponse = await openaiService.enhanceResponse(text, responseBase, { userId: from });
      } catch (error) {
        console.log('Usando resposta padr√£o');
      }
    }
    
    await evolutionService.sendTextMessage(from, enhancedResponse);
    await this.delay(1000);
    
    // Enviar carrossel de im√≥veis
    await this.sendPropertyCarousel(from, properties.slice(0, 3), profile);
  }
  
  // Enviar carrossel de im√≥veis
  async sendPropertyCarousel(from, properties, profile) {
    for (const property of properties) {
      // Gerar descri√ß√£o melhorada com IA
      let enhancedDescription = null;
      if (openaiService) {
        try {
          enhancedDescription = await openaiService.generatePropertyDescription(property);
        } catch (error) {
          console.log('Usando descri√ß√£o padr√£o');
        }
      }
      
      // Criar card do im√≥vel
      const card = this.createPropertyCard(property, enhancedDescription);
      
      // Enviar imagem
      if (property.images && property.images[0]) {
        await evolutionService.sendImageMessage(from, property.images[0], card);
      } else {
        await evolutionService.sendTextMessage(from, card);
      }
      
      await this.delay(2000);
    }
    
    // Op√ß√µes ap√≥s mostrar im√≥veis
    await this.sendPropertyActions(from, properties);
  }
  
  // Criar card de im√≥vel
  createPropertyCard(property, enhancedDescription = null) {
    const transaction = property.transaction === 'sale' ? 'Venda' : 'Aluguel';
    const price = property.transaction === 'sale' 
      ? `R$ ${property.price.toLocaleString('pt-BR')}`
      : `R$ ${property.price.toLocaleString('pt-BR')}/m√™s`;
      
    return `üè† *${property.title}*
üìç ${property.neighborhood}, ${property.city}

üí∞ *${transaction}:* ${price}
üìê *√Årea:* ${property.area}m¬≤
üõèÔ∏è *Quartos:* ${property.bedrooms} (${property.suites || 0} su√≠tes)
üöó *Vagas:* ${property.parking}

${enhancedDescription || property.description}

‚ú® *Destaques:*
${property.features.slice(0, 5).map(f => `‚Ä¢ ${f}`).join('\n')}

üîë *C√≥digo:* ${property.code}
${property.virtualTour ? `\nüé¨ *Tour Virtual:* ${property.virtualTour}` : ''}`;
  }
  
  // Enviar a√ß√µes ap√≥s mostrar im√≥veis
  async sendPropertyActions(from, properties) {
    const actions = {
      title: 'üí° O que voc√™ gostaria de fazer?',
      buttons: [
        {
          buttonId: 'schedule_visit',
          buttonText: { displayText: 'üìÖ Agendar Visita' }
        },
        {
          buttonId: 'see_more',
          buttonText: { displayText: 'üîç Ver Mais Im√≥veis' }
        },
        {
          buttonId: 'talk_agent',
          buttonText: { displayText: 'üí¨ Falar com Corretor' }
        }
      ]
    };
    
    await evolutionService.sendButtonMessage(from, actions);
  }
  
  // Lidar com menu principal
  async handleMainMenu(from, text, session) {
    if (text.includes('1') || text.includes('comprar')) {
      session.state = this.menuOptions.BUYING;
      await this.sendBuyingOptions(from);
    } else if (text.includes('2') || text.includes('vender')) {
      session.state = this.menuOptions.SELLING;
      await this.sendSellingForm(from);
    } else if (text.includes('3') || text.includes('alugar')) {
      session.state = this.menuOptions.RENTING;
      await this.sendRentingOptions(from);
    } else if (text.includes('4') || text.includes('agendar')) {
      session.state = this.menuOptions.SCHEDULE;
      await this.sendScheduleForm(from);
    } else if (text.includes('5') || text.includes('corretor')) {
      session.state = this.menuOptions.CONTACT;
      await this.sendContactInfo(from);
    } else {
      await evolutionService.sendTextMessage(
        from, 
        'Desculpe, n√£o entendi sua op√ß√£o. Por favor, escolha um n√∫mero de 1 a 5 ou digite "menu" para ver as op√ß√µes novamente.'
      );
    }
  }
  
  // Enviar op√ß√µes de compra
  async sendBuyingOptions(from) {
    const buyingContent = {
      title: 'üè† Comprar Im√≥vel',
      description: 'Que tipo de im√≥vel voc√™ procura?',
      buttons: [
        {
          buttonId: 'house',
          buttonText: { displayText: 'üè° Casa' }
        },
        {
          buttonId: 'apartment',
          buttonText: { displayText: 'üè¢ Apartamento' }
        },
        {
          buttonId: 'land',
          buttonText: { displayText: 'üåç Terreno' }
        }
      ]
    };
    
    await evolutionService.sendButtonMessage(from, buyingContent);
  }
  
  // Enviar op√ß√µes de aluguel
  async sendRentingOptions(from) {
    const rentingContent = {
      title: 'üîë Alugar Im√≥vel',
      description: 'Que tipo de im√≥vel voc√™ procura para alugar?',
      buttons: [
        {
          buttonId: 'rent_house',
          buttonText: { displayText: 'üè° Casa' }
        },
        {
          buttonId: 'rent_apartment',
          buttonText: { displayText: 'üè¢ Apartamento' }
        },
        {
          buttonId: 'rent_commercial',
          buttonText: { displayText: 'üè™ Comercial' }
        }
      ]
    };
    
    await evolutionService.sendButtonMessage(from, rentingContent);
  }
  
  // Enviar formul√°rio de venda
  async sendSellingForm(from) {
    const message = messageTemplates.getSellingFormMessage();
    await evolutionService.sendTextMessage(from, message);
  }
  
  // Enviar formul√°rio de agendamento
  async sendScheduleForm(from) {
    await evolutionService.sendTextMessage(
      from,
      `üìÖ *Vamos agendar sua visita!*\n\nPor favor, me informe:\n\n1Ô∏è‚É£ C√≥digo do im√≥vel\n2Ô∏è‚É£ Dia preferido\n3Ô∏è‚É£ Hor√°rio preferido\n4Ô∏è‚É£ Seu nome completo\n5Ô∏è‚É£ Telefone para contato\n\nExemplo:\n"APV001, pr√≥xima ter√ßa, 14h, Jo√£o Silva, 48999887766"`
    );
  }
  
  // Enviar informa√ß√µes de contato
  async sendContactInfo(from) {
    const contactInfo = messageTemplates.getContactInfo();
    await evolutionService.sendTextMessage(from, contactInfo);
  }
  
  // Lidar com fluxos espec√≠ficos
  async handleSellingFlow(from, text, session, profile) {
    // Aqui voc√™ implementaria a l√≥gica para processar dados do vendedor
    await evolutionService.sendTextMessage(
      from,
      '‚úÖ Recebi suas informa√ß√µes! Um de nossos corretores entrar√° em contato em at√© 24h para agendar a avalia√ß√£o gratuita do seu im√≥vel.'
    );
    session.state = this.menuOptions.MAIN;
  }
  
  async handleScheduleFlow(from, text, session, profile) {
    // Processar agendamento
    await evolutionService.sendTextMessage(
      from,
      '‚úÖ Visita agendada com sucesso! Voc√™ receber√° uma confirma√ß√£o por WhatsApp.'
    );
    session.state = this.menuOptions.MAIN;
  }
  
  async handleContactFlow(from, text, session) {
    // J√° enviou as informa√ß√µes, voltar ao menu
    session.state = this.menuOptions.MAIN;
  }
  
  async handlePropertyViewing(from, text, session, profile) {
    // Implementar visualiza√ß√£o detalhada de im√≥vel
    await this.handleMainMenu(from, text, session);
  }
  
  // Lidar com localiza√ß√£o
  async handleLocationMessage(from, location, session, profile) {
    const { latitude, longitude } = location;
    
    // Buscar im√≥veis pr√≥ximos
    const nearbyProperties = this.findNearbyProperties(latitude, longitude, 5); // 5km raio
    
    if (nearbyProperties.length > 0) {
      await evolutionService.sendTextMessage(
        from,
        `üìç Encontrei ${nearbyProperties.length} im√≥veis pr√≥ximos a esta localiza√ß√£o!`
      );
      
      await this.sendPropertyCarousel(from, nearbyProperties.slice(0, 3), profile);
    } else {
      await evolutionService.sendTextMessage(
        from,
        'üòî N√£o encontrei im√≥veis pr√≥ximos a esta localiza√ß√£o. Que tal ampliarmos a busca?'
      );
    }
  }
  
  // Buscar im√≥veis pr√≥ximos
  findNearbyProperties(lat, lon, radiusKm) {
    const { properties } = require('../data/realEstateData');
    
    return properties.filter(property => {
      if (!property.location) return false;
      
      const distance = this.calculateDistance(
        lat, lon,
        property.location.lat,
        property.location.lng
      );
      
      return distance <= radiusKm;
    });
  }
  
  // Calcular dist√¢ncia entre coordenadas
  calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371; // Raio da Terra em km
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  }
  
  // Lidar com consultas gerais
  async handleGeneralQuery(from, text, profile) {
    // Tentar responder perguntas sobre a regi√£o
    if (text.includes('bairro') || text.includes('regi√£o') || text.includes('onde')) {
      let answer = 'Posso te ajudar com informa√ß√µes sobre os bairros! Temos im√≥veis em Jurer√™ Internacional, Lagoa da Concei√ß√£o, Centro, Campeche e muito mais. Qual regi√£o te interessa?';
      
      if (openaiService) {
        try {
          answer = await openaiService.answerLocationQuestion(text);
        } catch (error) {
          console.log('Usando resposta padr√£o para localiza√ß√£o');
        }
      }
      
      await evolutionService.sendTextMessage(from, answer);
      
      await this.delay(2000);
      await evolutionService.sendTextMessage(
        from,
        'Gostaria de ver im√≥veis dispon√≠veis nesta regi√£o? Digite "sim" ou "menu" para voltar.'
      );
    } else {
      await this.sendDefaultMessage(from);
    }
  }
  
  // Enviar mensagem de boas-vindas melhorada
  async sendWelcomeMessage(from, name) {
    const hour = new Date().getHours();
    let greeting = 'Bom dia';
    
    if (hour >= 12 && hour < 18) {
      greeting = 'Boa tarde';
    } else if (hour >= 18) {
      greeting = 'Boa noite';
    }
    
    const welcomeText = `${greeting}, ${name}! üëã

Bem-vindo √† *Imobili√°ria Premium Floripa*! üè†‚ú®

Sou Carlos Silva, seu corretor virtual com 15 anos de experi√™ncia no mercado imobili√°rio de Florian√≥polis e regi√£o.

Temos *30 im√≥veis exclusivos* dispon√≠veis, desde studios modernos at√© mans√µes de frente para o mar! üåä

Como posso ajudar voc√™ hoje?`;
    
    await evolutionService.sendTextMessage(from, welcomeText);
    await this.delay(2000);
    
    // Menu interativo
    await this.sendInteractiveMenu(from);
  }
  
  // Menu interativo melhorado
  async sendInteractiveMenu(from) {
    const menu = {
      title: 'üè° Como posso ajudar?',
      description: 'Escolha uma op√ß√£o ou me conte o que procura:',
      buttonText: 'Ver Op√ß√µes',
      sections: [
        {
          title: 'üîç Encontrar Im√≥veis',
          rows: [
            {
              rowId: 'buy_house',
              title: 'üè† Comprar Casa',
              description: 'Casas √† venda em toda regi√£o'
            },
            {
              rowId: 'buy_apartment',
              title: 'üè¢ Comprar Apartamento',
              description: 'Apartamentos com a sua cara'
            },
            {
              rowId: 'rent',
              title: 'üîë Alugar Im√≥vel',
              description: 'Para morar ou temporada'
            }
          ]
        },
        {
          title: 'üìã Outros Servi√ßos',
          rows: [
            {
              rowId: 'sell',
              title: 'üí∞ Vender Meu Im√≥vel',
              description: 'Avalia√ß√£o gratuita'
            },
            {
              rowId: 'featured',
              title: '‚≠ê Im√≥veis em Destaque',
              description: 'Oportunidades imperd√≠veis'
            },
            {
              rowId: 'regions',
              title: 'üìç Conhecer Regi√µes',
              description: 'Informa√ß√µes sobre bairros'
            }
          ]
        }
      ]
    };
    
    await evolutionService.sendListMessage(from, menu);
  }
  
  // Lidar com respostas de lista
  async handleListResponse(from, listResponse, session, profile) {
    const selectedId = listResponse.singleSelectReply?.selectedRowId;
    
    if (!selectedId) return;
    
    switch (selectedId) {
      case 'buy_house':
        session.state = this.menuOptions.BUYING;
        session.searchFilters = { type: 'house', transaction: 'sale' };
        await this.handleBuyingIntent(from, 'quero comprar casa', { propertyType: 'house' }, session, profile);
        break;
        
      case 'buy_apartment':
        session.state = this.menuOptions.BUYING;
        session.searchFilters = { type: 'apartment', transaction: 'sale' };
        await this.handleBuyingIntent(from, 'quero comprar apartamento', { propertyType: 'apartment' }, session, profile);
        break;
        
      case 'rent':
        session.state = this.menuOptions.RENTING;
        await this.sendRentingOptions(from);
        break;
        
      case 'sell':
        session.state = this.menuOptions.SELLING;
        await this.sendSellingForm(from);
        break;
        
      case 'featured':
        const featured = getFeaturedProperties();
        await evolutionService.sendTextMessage(from, '‚≠ê *Im√≥veis em Destaque desta Semana!*');
        await this.sendPropertyCarousel(from, featured.slice(0, 3), profile);
        break;
        
      case 'regions':
        await evolutionService.sendTextMessage(
          from,
          'üìç *Sobre qual regi√£o voc√™ gostaria de saber mais?*\n\n‚Ä¢ Jurer√™ Internacional\n‚Ä¢ Lagoa da Concei√ß√£o\n‚Ä¢ Centro\n‚Ä¢ Campeche\n‚Ä¢ Balne√°rio Cambori√∫\n‚Ä¢ Ou digite o nome de outro bairro!'
        );
        break;
    }
  }
  
  // Lidar com respostas de bot√£o
  async handleButtonResponse(from, buttonResponse, session, profile) {
    const selectedId = buttonResponse.selectedButtonId;
    
    switch (selectedId) {
      case 'house':
      case 'apartment':
      case 'land':
        session.searchFilters = { 
          ...session.searchFilters, 
          type: selectedId,
          transaction: 'sale'
        };
        await this.handlePropertySearch(from, `procuro ${selectedId}`, { propertyType: selectedId }, session, profile);
        break;
        
      case 'rent_house':
      case 'rent_apartment':
      case 'rent_commercial':
        const type = selectedId.replace('rent_', '');
        session.searchFilters = { 
          type: type,
          transaction: 'rent'
        };
        await this.handlePropertySearch(from, `alugar ${type}`, { propertyType: type }, session, profile);
        break;
        
      case 'schedule_visit':
        session.state = this.menuOptions.SCHEDULE;
        await this.sendScheduleForm(from);
        break;
        
      case 'see_more':
        await evolutionService.sendTextMessage(
          from,
          'Claro! Me conta mais detalhes do que voc√™ procura:\n\n‚Ä¢ Localiza√ß√£o preferida?\n‚Ä¢ Faixa de pre√ßo?\n‚Ä¢ Quantidade de quartos?\n‚Ä¢ Alguma caracter√≠stica especial?'
        );
        break;
        
      case 'talk_agent':
        session.state = this.menuOptions.CONTACT;
        await this.sendContactInfo(from);
        break;
    }
  }
  
  // Mensagem quando n√£o h√° resultados
  async sendNoResultsMessage(from, filters) {
    const response = `üòî No momento n√£o encontrei im√≥veis com essas caracter√≠sticas espec√≠ficas.

Mas n√£o desanime! Posso:
1Ô∏è‚É£ Ampliar a busca com crit√©rios similares
2Ô∏è‚É£ Cadastrar seu interesse para avisar quando surgir
3Ô∏è‚É£ Mostrar op√ß√µes pr√≥ximas ao que procura

O que prefere?`;
    
    await evolutionService.sendTextMessage(from, response);
  }
  
  // Gerenciar perfil do usu√°rio
  getUserProfile(userId, name = 'Cliente') {
    if (!userProfiles.has(userId)) {
      userProfiles.set(userId, {
        name: name,
        searchHistory: [],
        preferences: {
          type: null,
          priceRange: {},
          locations: [],
          features: []
        },
        interactions: 0,
        lastInteraction: Date.now()
      });
    }
    
    const profile = userProfiles.get(userId);
    profile.interactions++;
    profile.lastInteraction = Date.now();
    
    return profile;
  }
  
  // Atualizar perfil com base em inten√ß√µes
  updateUserProfile(userId, intent) {
    const profile = userProfiles.get(userId);
    if (!profile) return;
    
    if (intent.propertyType && intent.propertyType !== 'any') {
      profile.preferences.type = intent.propertyType;
    }
    
    if (intent.priceRange) {
      profile.preferences.priceRange = intent.priceRange;
    }
    
    if (intent.location && !profile.preferences.locations.includes(intent.location)) {
      profile.preferences.locations.push(intent.location);
    }
    
    if (intent.features && intent.features.length > 0) {
      profile.preferences.features = [...new Set([...profile.preferences.features, ...intent.features])];
    }
  }
  
  // Gerenciar sess√£o do usu√°rio
  getUserSession(userId) {
    if (!userSessions.has(userId)) {
      userSessions.set(userId, {
        started: false,
        state: null,
        data: {},
        searchFilters: null,
        viewingProperty: null,
        timestamp: Date.now()
      });
    }
    return userSessions.get(userId);
  }
  
  // Helpers
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
  
  async sendErrorMessage(from) {
    await evolutionService.sendTextMessage(
      from,
      '‚ùå Ops! Ocorreu um erro. Por favor, tente novamente ou digite "menu" para reiniciar.'
    );
  }
  
  async sendDefaultMessage(from) {
    await evolutionService.sendTextMessage(
      from,
      'ü§î N√£o entendi sua mensagem. Voc√™ pode:\n\n' +
      '‚Ä¢ Digitar "menu" para ver op√ß√µes\n' +
      '‚Ä¢ Me contar o que procura (ex: "quero alugar apartamento na Lagoa")\n' +
      '‚Ä¢ Enviar um √°udio com sua necessidade üé§'
    );
  }
}

module.exports = new MessageService();