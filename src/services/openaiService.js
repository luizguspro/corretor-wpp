// src/services/openaiService.js - VERS√ÉO ATUALIZADA COM NOVOS MODELOS
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

class OpenAIService {
  constructor() {
    this.apiKey = process.env.OPENAI_API_KEY;
    this.apiUrl = 'https://api.openai.com/v1';
    
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è OpenAI API Key n√£o configurada');
      return;
    }
    
    // MODELOS ATUALIZADOS - Documenta√ß√£o oficial OpenAI
    this.chatModel = process.env.OPENAI_MODEL || 'gpt-4o-mini';
    
    // Novos modelos de transcri√ß√£o (escolha um):
    // - gpt-4o-transcribe (mais qualidade)
    // - gpt-4o-mini-transcribe (mais r√°pido e barato)
    // - whisper-1 (modelo cl√°ssico com mais op√ß√µes)
    this.whisperModel = process.env.WHISPER_MODEL || 'gpt-4o-mini-transcribe';
    
    console.log(`ü§ñ OpenAI Service inicializado`);
    console.log(`üìä Modelo de chat: ${this.chatModel}`);
    console.log(`üé§ Modelo de transcri√ß√£o: ${this.whisperModel}`);
    
    this.api = axios.create({
      baseURL: this.apiUrl,
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json'
      },
      timeout: 60000
    });
    
    // Contexto do assistente
    this.systemPrompt = `Voc√™ √© um corretor de im√≥veis experiente e amig√°vel da regi√£o de Florian√≥polis e Balne√°rio Cambori√∫. 
    
Suas caracter√≠sticas:
- Nome: Carlos Silva
- Experi√™ncia: 15 anos no mercado imobili√°rio
- Especialidade: Im√≥veis de m√©dio e alto padr√£o
- Personalidade: Profissional, atencioso, conhece bem a regi√£o

Diretrizes:
1. Sempre seja cordial e profissional
2. Use emojis moderadamente para tornar a conversa mais amig√°vel
3. Entenda as necessidades do cliente fazendo perguntas relevantes
4. Forne√ßa informa√ß√µes detalhadas sobre os im√≥veis
5. Destaque os pontos fortes de cada regi√£o
6. Seja honesto sobre pr√≥s e contras
7. Sempre tente agendar uma visita presencial
8. Se n√£o souber algo, admita e ofere√ßa buscar a informa√ß√£o`;
    
    this.conversationCache = new Map();
  }
  
  // Transcrever √°udio - VERS√ÉO COM NOVOS MODELOS
  async transcribeAudio(audioData, mimeType = 'audio/ogg') {
    try {
      if (!this.apiKey) {
        throw new Error('OpenAI API Key n√£o configurada');
      }
      
      console.log('üé§ [OpenAI] Iniciando transcri√ß√£o...');
      console.log(`üìä [OpenAI] Modelo: ${this.whisperModel}`);
      console.log(`üìä [OpenAI] Dados:`, {
        tipo: Buffer.isBuffer(audioData) ? 'Buffer' : typeof audioData,
        tamanho: audioData.length,
        mimeType: mimeType
      });
      
      // Criar diret√≥rio tempor√°rio
      const tempDir = path.join(__dirname, '../../temp');
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
      }
      
      // Mapear mime types para extens√µes
      const extensionMap = {
        'audio/ogg': 'ogg',
        'audio/mpeg': 'mp3',
        'audio/mp3': 'mp3',
        'audio/mp4': 'm4a',
        'audio/x-m4a': 'm4a',
        'audio/wav': 'wav',
        'audio/webm': 'webm',
        'audio/opus': 'opus',
        'audio/x-opus+ogg': 'opus'
      };
      
      const extension = extensionMap[mimeType] || 'ogg';
      
      // Nome √∫nico para o arquivo
      const timestamp = Date.now();
      const random = Math.random().toString(36).substring(7);
      const filename = `audio_${timestamp}_${random}.${extension}`;
      const filepath = path.join(tempDir, filename);
      
      console.log(`üìÅ [OpenAI] Salvando √°udio: ${filename}`);
      
      // Converter e salvar √°udio
      let audioBuffer;
      if (Buffer.isBuffer(audioData)) {
        audioBuffer = audioData;
      } else if (typeof audioData === 'string') {
        // Remover header data:audio se existir
        let base64Data = audioData;
        if (base64Data.includes('base64,')) {
          base64Data = base64Data.split('base64,')[1];
        }
        audioBuffer = Buffer.from(base64Data, 'base64');
      } else {
        throw new Error('Formato de √°udio n√£o suportado');
      }
      
      // Verificar tamanho (limite: 25MB)
      const fileSizeMB = audioBuffer.length / (1024 * 1024);
      console.log(`üìä [OpenAI] Tamanho: ${fileSizeMB.toFixed(2)}MB`);
      
      if (fileSizeMB > 25) {
        throw new Error('Arquivo muito grande. M√°ximo: 25MB');
      }
      
      // Salvar arquivo
      fs.writeFileSync(filepath, audioBuffer);
      
      // Verificar se foi salvo
      const stats = fs.statSync(filepath);
      if (stats.size === 0) {
        throw new Error('Arquivo salvo est√° vazio');
      }
      
      console.log(`‚úÖ [OpenAI] Arquivo salvo: ${stats.size} bytes`);
      
      // Criar FormData
      const formData = new FormData();
      formData.append('file', fs.createReadStream(filepath), {
        filename: filename,
        contentType: mimeType || 'audio/ogg'
      });
      
      formData.append('model', this.whisperModel);
      
      // Configura√ß√µes baseadas no modelo
      if (this.whisperModel.includes('gpt-4o')) {
        // Novos modelos s√≥ suportam json ou text
        formData.append('response_format', 'json');
        
        // Prompt melhorado para os novos modelos
        const prompt = 'Transcreva fielmente este √°udio em portugu√™s brasileiro. ' +
                      'Contexto: cliente procurando im√≥veis para comprar, vender ou alugar em Florian√≥polis. ' +
                      'Preserve a forma natural de falar, incluindo pausas e hesita√ß√µes. ' +
                      'Termos comuns do mercado: kitnet, quitinete, JK, studio, cobertura, duplex, sobrado, ' +
                      'geminado, garden, loft, flat, home office, pet friendly, vista mar, p√© na areia.';
        
        formData.append('prompt', prompt);
        
      } else {
        // whisper-1 tem mais op√ß√µes
        formData.append('response_format', 'json');
        formData.append('language', 'pt');
        formData.append('prompt', 'Transcreva o √°udio em portugu√™s brasileiro sobre im√≥veis.');
      }
      
      console.log('üì§ [OpenAI] Enviando para API...');
      
      // Fazer requisi√ß√£o
      const startTime = Date.now();
      const response = await axios.post(
        `${this.apiUrl}/audio/transcriptions`,
        formData,
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            ...formData.getHeaders()
          },
          maxContentLength: Infinity,
          maxBodyLength: Infinity,
          timeout: 120000 // 2 minutos
        }
      );
      
      const processingTime = Date.now() - startTime;
      console.log(`‚è±Ô∏è [OpenAI] Tempo: ${processingTime}ms`);
      
      // Limpar arquivo tempor√°rio
      try {
        fs.unlinkSync(filepath);
        console.log('üóëÔ∏è [OpenAI] Arquivo tempor√°rio removido');
      } catch (cleanupError) {
        console.warn('‚ö†Ô∏è [OpenAI] N√£o foi poss√≠vel remover arquivo tempor√°rio');
      }
      
      // Validar resposta
      if (!response.data || typeof response.data.text !== 'string') {
        console.error('‚ùå [OpenAI] Resposta inv√°lida:', response.data);
        throw new Error('Resposta inv√°lida da API');
      }
      
      const transcription = response.data.text.trim();
      
      if (!transcription || transcription.length < 2) {
        throw new Error('Transcri√ß√£o vazia ou muito curta');
      }
      
      console.log('‚úÖ [OpenAI] Transcri√ß√£o:', transcription);
      
      return transcription;
      
    } catch (error) {
      console.error('‚ùå [OpenAI] Erro na transcri√ß√£o:', error);
      
      // Limpar arquivo tempor√°rio em caso de erro
      if (filepath && fs.existsSync(filepath)) {
        try {
          fs.unlinkSync(filepath);
        } catch (e) {}
      }
      
      // Tratamento detalhado de erros
      if (error.response) {
        const status = error.response.status;
        const errorData = error.response.data;
        
        console.error('[OpenAI] Status:', status);
        console.error('[OpenAI] Resposta:', JSON.stringify(errorData, null, 2));
        
        if (status === 401) {
          throw new Error('API Key inv√°lida. Verifique sua chave OpenAI.');
        } else if (status === 413) {
          throw new Error('√Åudio muito grande. M√°ximo: 25MB.');
        } else if (status === 415) {
          throw new Error('Formato n√£o suportado. Use: mp3, mp4, mpeg, mpga, m4a, wav, webm.');
        } else if (status === 429) {
          throw new Error('Limite de requisi√ß√µes. Aguarde um momento.');
        } else if (status === 400) {
          const errorMessage = errorData?.error?.message || 'Requisi√ß√£o inv√°lida';
          
          // Verificar se √© erro de modelo
          if (errorMessage.includes('model')) {
            throw new Error(`Modelo "${this.whisperModel}" n√£o dispon√≠vel. Use: whisper-1, gpt-4o-transcribe ou gpt-4o-mini-transcribe`);
          }
          
          throw new Error(`Erro: ${errorMessage}`);
        } else {
          throw new Error(`Erro ${status}: ${errorData?.error?.message || 'Desconhecido'}`);
        }
      } else if (error.code === 'ECONNABORTED') {
        throw new Error('Tempo limite. √Åudio muito longo.');
      } else if (error.code === 'ENOTFOUND') {
        throw new Error('Sem conex√£o com OpenAI.');
      } else {
        throw error;
      }
    }
  }
  
  // Melhorar resposta usando GPT
  async enhanceResponse(userMessage, botResponse, context = {}) {
    try {
      if (!this.apiKey) return botResponse;
      
      const messages = this.buildConversationContext(context.userId, userMessage, botResponse);
      
      const response = await this.api.post('/chat/completions', {
        model: this.chatModel,
        messages: messages,
        temperature: 0.7,
        max_tokens: 500,
        presence_penalty: 0.3,
        frequency_penalty: 0.3
      });
      
      const enhancedResponse = response.data.choices[0].message.content;
      
      this.updateConversationCache(context.userId, userMessage, enhancedResponse);
      
      return enhancedResponse;
    } catch (error) {
      console.error('[OpenAI] Erro ao melhorar resposta:', error.response?.data || error.message);
      return botResponse;
    }
  }
  
  // Analisar inten√ß√£o do usu√°rio
  async analyzeIntent(userMessage, context = {}) {
    try {
      if (!this.apiKey) {
        return {
          intent: 'other',
          propertyType: 'any',
          sentiment: 'neutral'
        };
      }
      
      const response = await this.api.post('/chat/completions', {
        model: this.chatModel,
        messages: [
          {
            role: 'system',
            content: `Analise a mensagem e retorne APENAS um JSON v√°lido com a inten√ß√£o do usu√°rio sobre im√≥veis.`
          },
          {
            role: 'user',
            content: `Analise: "${userMessage}"\n\nRetorne JSON: {"intent": "buy|rent|sell|visit|info|other", "propertyType": "house|apartment|land|commercial|any", "location": "bairro/cidade se mencionado", "priceRange": {"min": null, "max": null}, "bedrooms": null, "features": [], "urgency": "high|medium|low", "sentiment": "positive|neutral|negative"}`
          }
        ],
        temperature: 0.3,
        max_tokens: 200
      });
      
      const content = response.data.choices[0].message.content;
      
      // Extrair JSON
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
      
      return JSON.parse(content);
    } catch (error) {
      console.error('[OpenAI] Erro ao analisar inten√ß√£o:', error.message);
      return {
        intent: 'other',
        propertyType: 'any',
        sentiment: 'neutral'
      };
    }
  }
  
  // Gerar descri√ß√£o criativa para im√≥vel
  async generatePropertyDescription(property) {
    try {
      if (!this.apiKey) return property.description;
      
      const prompt = `Crie uma descri√ß√£o atraente e vendedora para este im√≥vel:
      
Tipo: ${property.type === 'house' ? 'Casa' : 'Apartamento'}
Localiza√ß√£o: ${property.address}
√Årea: ${property.area}m¬≤
Quartos: ${property.bedrooms} (${property.suites} su√≠tes)
Valor: R$ ${property.price.toLocaleString('pt-BR')}
Caracter√≠sticas: ${property.features.join(', ')}

A descri√ß√£o deve:
1. Ter no m√°ximo 3 par√°grafos
2. Destacar os pontos fortes
3. Criar desejo no cliente
4. Ser honesta mas persuasiva
5. Usar linguagem elegante mas acess√≠vel`;
      
      const response = await this.api.post('/chat/completions', {
        model: this.chatModel,
        messages: [
          { role: 'system', content: 'Voc√™ √© um redator especializado em im√≥veis de alto padr√£o.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.8,
        max_tokens: 300
      });
      
      return response.data.choices[0].message.content;
    } catch (error) {
      console.error('[OpenAI] Erro ao gerar descri√ß√£o:', error.response?.data || error.message);
      return property.description;
    }
  }
  
  // Gerar sugest√µes personalizadas
  async generatePersonalizedSuggestions(userProfile, availableProperties) {
    try {
      if (!this.apiKey) return null;
      
      const prompt = `Baseado no perfil do cliente e nos im√≥veis dispon√≠veis, sugira os 3 melhores:
      
Perfil do Cliente:
${JSON.stringify(userProfile, null, 2)}

Im√≥veis Dispon√≠veis:
${availableProperties.map(p => `- ${p.title}: ${p.bedrooms} quartos, ${p.area}m¬≤, R$ ${p.price.toLocaleString('pt-BR')}`).join('\n')}

Forne√ßa:
1. Os 3 im√≥veis mais adequados com justificativa
2. Um argumento de venda personalizado
3. Ordem de prioridade`;
      
      const response = await this.api.post('/chat/completions', {
        model: this.chatModel,
        messages: [
          { role: 'system', content: this.systemPrompt },
          { role: 'user', content: prompt }
        ],
        temperature: 0.6,
        max_tokens: 500
      });
      
      return response.data.choices[0].message.content;
    } catch (error) {
      console.error('[OpenAI] Erro ao gerar sugest√µes:', error.response?.data || error.message);
      return null;
    }
  }
  
  // Responder perguntas sobre a regi√£o
  async answerLocationQuestion(question) {
    try {
      if (!this.apiKey) {
        return 'Desculpe, n√£o consegui processar sua pergunta.';
      }
      
      const response = await this.api.post('/chat/completions', {
        model: this.chatModel,
        messages: [
          { 
            role: 'system', 
            content: 'Voc√™ √© um especialista em im√≥veis de Florian√≥polis e Balne√°rio Cambori√∫.' 
          },
          { 
            role: 'user', 
            content: `Responda sobre a regi√£o: "${question}"\n\nInclua: caracter√≠sticas, infraestrutura, perfil dos moradores, valoriza√ß√£o.`
          }
        ],
        temperature: 0.5,
        max_tokens: 400
      });
      
      return response.data.choices[0].message.content;
    } catch (error) {
      console.error('[OpenAI] Erro ao responder:', error.response?.data || error.message);
      return 'Desculpe, n√£o consegui processar sua pergunta.';
    }
  }
  
  // Construir contexto da conversa
  buildConversationContext(userId, userMessage, botResponse) {
    const messages = [
      { role: 'system', content: this.systemPrompt }
    ];
    
    if (this.conversationCache.has(userId)) {
      const history = this.conversationCache.get(userId);
      const recentHistory = history.slice(-10);
      messages.push(...recentHistory);
    }
    
    messages.push(
      { role: 'user', content: userMessage },
      { 
        role: 'assistant', 
        content: `Resposta atual: ${botResponse}\n\nMelhore mantendo a mesma inten√ß√£o mas tornando-a mais natural e persuasiva.` 
      }
    );
    
    return messages;
  }
  
  // Atualizar cache
  updateConversationCache(userId, userMessage, assistantResponse) {
    if (!this.conversationCache.has(userId)) {
      this.conversationCache.set(userId, []);
    }
    
    const history = this.conversationCache.get(userId);
    history.push(
      { role: 'user', content: userMessage },
      { role: 'assistant', content: assistantResponse }
    );
    
    if (history.length > 20) {
      history.splice(0, history.length - 20);
    }
  }
  
  // Limpar conversas antigas
  cleanOldConversations() {
    const now = Date.now();
    for (const [userId, data] of this.conversationCache.entries()) {
      if (now - data.lastUpdate > 3600000) {
        this.conversationCache.delete(userId);
      }
    }
  }
}

module.exports = new OpenAIService();