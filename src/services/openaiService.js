// src/services/openaiService.js
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

class OpenAIService {
  constructor() {
    this.apiKey = process.env.OPENAI_API_KEY;
    this.apiUrl = 'https://api.openai.com/v1';
    
    // Verificar se a API key existe
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è OpenAI API Key n√£o configurada');
      return;
    }
    
    this.api = axios.create({
      baseURL: this.apiUrl,
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json'
      }
    });
    
    // Contexto do assistente
    this.systemPrompt = `Voc√™ √© um corretor de im√≥veis experiente e amig√°vel da regi√£o de Florian√≥polis e Balne√°rio Cambori√∫. 
    
Suas caracter√≠sticas:
- Nome: Carlos Silva
- Experi√™ncia: 15 anos no mercado imobili√°rio
- Especialidade: Im√≥veis de m√©dio e alto padr√£o
- Personalidade: Profissional, atencioso, conhece bem a regi√£o

Diretrizes:
1. Sempre seja cordial e profissional
2. Use emojis moderadamente para tornar a conversa mais amig√°vel
3. Entenda as necessidades do cliente fazendo perguntas relevantes
4. Forne√ßa informa√ß√µes detalhadas sobre os im√≥veis
5. Destaque os pontos fortes de cada regi√£o
6. Seja honesto sobre pr√≥s e contras
7. Sempre tente agendar uma visita presencial
8. Se n√£o souber algo, admita e ofere√ßa buscar a informa√ß√£o

Conhecimento local:
- Jurer√™ Internacional: Bairro nobre, praias calmas, alta gastronomia
- Lagoa da Concei√ß√£o: Bo√™mio, jovem, √≥tima vida noturna
- Centro: Pr√°tico, com√©rcio, f√°cil acesso
- Campeche: Familiar, praia extensa, em valoriza√ß√£o
- Balne√°rio Cambori√∫: Urbano, arranha-c√©us, vida noturna intensa
- Santo Ant√¥nio de Lisboa: Hist√≥rico, p√¥r do sol, gastronomia

Sempre mencione que temos 30 im√≥veis dispon√≠veis e personalize as sugest√µes baseado no perfil do cliente.`;
    
    // Cache de conversas para contexto
    this.conversationCache = new Map();
  }
  
  // Transcrever √°udio para texto - CORRIGIDO E MELHORADO
  async transcribeAudio(audioData, mimeType = 'audio/ogg') {
    try {
      if (!this.apiKey) {
        throw new Error('OpenAI API Key n√£o configurada');
      }
      
      console.log('üé§ Iniciando transcri√ß√£o de √°udio...');
      console.log(`üìä Tipo: ${mimeType}, Tamanho: ${audioData.length} bytes`);
      
      // Criar diret√≥rio tempor√°rio se n√£o existir
      const tempDir = path.join(__dirname, '../../temp');
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
      }
      
      // Determinar extens√£o baseada no mimeType
      let extension = 'ogg';
      if (mimeType.includes('mp4')) extension = 'mp4';
      if (mimeType.includes('mpeg') || mimeType.includes('mp3')) extension = 'mp3';
      if (mimeType.includes('wav')) extension = 'wav';
      if (mimeType.includes('webm')) extension = 'webm';
      if (mimeType.includes('opus')) extension = 'opus';
      if (mimeType.includes('m4a')) extension = 'm4a';
      
      // Gerar nome √∫nico para o arquivo
      const tempFileName = `audio_${Date.now()}_${Math.random().toString(36).substr(2, 9)}.${extension}`;
      const tempPath = path.join(tempDir, tempFileName);
      
      // Salvar √°udio
      if (Buffer.isBuffer(audioData)) {
        fs.writeFileSync(tempPath, audioData);
      } else if (typeof audioData === 'string') {
        // Se for base64
        const buffer = Buffer.from(audioData, 'base64');
        fs.writeFileSync(tempPath, buffer);
      } else {
        throw new Error('Formato de √°udio n√£o reconhecido');
      }
      
      console.log(`üìÅ √Åudio salvo em: ${tempPath}`);
      console.log(`üìä Tamanho do arquivo: ${fs.statSync(tempPath).size} bytes`);
      
      // Verificar se o arquivo n√£o est√° vazio
      if (fs.statSync(tempPath).size === 0) {
        throw new Error('Arquivo de √°udio vazio');
      }
      
      // Criar FormData
      const formData = new FormData();
      formData.append('file', fs.createReadStream(tempPath));
      formData.append('model', 'whisper-1');
      formData.append('language', 'pt'); // Portugu√™s
      formData.append('response_format', 'json');
      
      // Adicionar prompt para melhorar a transcri√ß√£o em portugu√™s
      formData.append('prompt', 'Transcreva o √°udio em portugu√™s brasileiro. O contexto √© sobre im√≥veis, casas, apartamentos, compra, venda ou aluguel.');
      
      // Fazer requisi√ß√£o
      console.log('üì§ Enviando para OpenAI Whisper...');
      const response = await axios.post(
        `${this.apiUrl}/audio/transcriptions`,
        formData,
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            ...formData.getHeaders()
          },
          maxContentLength: Infinity,
          maxBodyLength: Infinity,
          timeout: 60000 // 60 segundos timeout
        }
      );
      
      // Limpar arquivo tempor√°rio
      try {
        fs.unlinkSync(tempPath);
        console.log('üóëÔ∏è Arquivo tempor√°rio removido');
      } catch (e) {
        console.warn('N√£o foi poss√≠vel deletar arquivo tempor√°rio:', e.message);
      }
      
      // Validar resposta
      if (!response.data || !response.data.text) {
        throw new Error('Resposta inv√°lida da API');
      }
      
      const transcription = response.data.text.trim();
      console.log('‚úÖ Transcri√ß√£o conclu√≠da:', transcription);
      
      // Verificar se a transcri√ß√£o n√£o est√° vazia
      if (!transcription || transcription.length < 3) {
        throw new Error('Transcri√ß√£o vazia ou muito curta');
      }
      
      return transcription;
      
    } catch (error) {
      console.error('‚ùå Erro ao transcrever √°udio:', error.response?.data || error.message);
      
      // Limpar arquivo tempor√°rio em caso de erro
      if (tempPath && fs.existsSync(tempPath)) {
        try {
          fs.unlinkSync(tempPath);
        } catch (e) {
          // Ignorar erro ao deletar
        }
      }
      
      // Log mais detalhado do erro
      if (error.response) {
        console.error('Status:', error.response.status);
        console.error('Headers:', error.response.headers);
        if (error.response.data) {
          console.error('Resposta:', JSON.stringify(error.response.data, null, 2));
        }
      }
      
      // Mensagens de erro mais espec√≠ficas
      if (error.response?.status === 401) {
        throw new Error('API Key inv√°lida ou n√£o autorizada');
      } else if (error.response?.status === 413) {
        throw new Error('√Åudio muito grande (m√°ximo 25MB)');
      } else if (error.response?.status === 415) {
        throw new Error('Formato de √°udio n√£o suportado');
      } else if (error.message.includes('ENOENT')) {
        throw new Error('Erro ao salvar arquivo tempor√°rio');
      } else if (error.message.includes('timeout')) {
        throw new Error('Tempo limite excedido ao processar √°udio');
      }
      
      throw new Error('N√£o foi poss√≠vel transcrever o √°udio. ' + (error.response?.data?.error?.message || error.message));
    }
  }
  
  // Melhorar resposta usando GPT
  async enhanceResponse(userMessage, botResponse, context = {}) {
    try {
      if (!this.apiKey) return botResponse;
      
      const messages = this.buildConversationContext(context.userId, userMessage, botResponse);
      
      const response = await this.api.post('/chat/completions', {
        model: 'gpt-3.5-turbo', // Use gpt-4 se tiver acesso
        messages: messages,
        temperature: 0.7,
        max_tokens: 500,
        presence_penalty: 0.3,
        frequency_penalty: 0.3
      });
      
      const enhancedResponse = response.data.choices[0].message.content;
      
      // Atualizar cache de conversa
      this.updateConversationCache(context.userId, userMessage, enhancedResponse);
      
      return enhancedResponse;
    } catch (error) {
      console.error('Erro ao melhorar resposta:', error.message);
      return botResponse;
    }
  }
  
  // Analisar inten√ß√£o do usu√°rio
  async analyzeIntent(userMessage, context = {}) {
    try {
      if (!this.apiKey) {
        return {
          intent: 'other',
          propertyType: 'any',
          sentiment: 'neutral'
        };
      }
      
      const response = await this.api.post('/chat/completions', {
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: `Analise a mensagem do usu√°rio e identifique a inten√ß√£o relacionada a im√≥veis.
            Responda APENAS com um JSON no formato:
            {
              "intent": "buy|rent|sell|visit|info|other",
              "propertyType": "house|apartment|land|commercial|any",
              "location": "nome do bairro ou cidade se mencionado",
              "priceRange": { "min": null, "max": null },
              "bedrooms": null,
              "features": ["features mencionadas"],
              "urgency": "high|medium|low",
              "sentiment": "positive|neutral|negative"
            }`
          },
          {
            role: 'user',
            content: userMessage
          }
        ],
        temperature: 0.3,
        max_tokens: 200
      });
      
      const content = response.data.choices[0].message.content;
      return JSON.parse(content);
    } catch (error) {
      console.error('Erro ao analisar inten√ß√£o:', error);
      return {
        intent: 'other',
        propertyType: 'any',
        sentiment: 'neutral'
      };
    }
  }
  
  // Gerar descri√ß√£o criativa para im√≥vel
  async generatePropertyDescription(property) {
    try {
      if (!this.apiKey) return property.description;
      
      const prompt = `Crie uma descri√ß√£o atraente e vendedora para este im√≥vel:
      
Tipo: ${property.type === 'house' ? 'Casa' : 'Apartamento'}
Localiza√ß√£o: ${property.address}
√Årea: ${property.area}m¬≤
Quartos: ${property.bedrooms} (${property.suites} su√≠tes)
Valor: R$ ${property.price.toLocaleString('pt-BR')}
Caracter√≠sticas: ${property.features.join(', ')}

A descri√ß√£o deve:
1. Ter no m√°ximo 3 par√°grafos
2. Destacar os pontos fortes
3. Criar desejo no cliente
4. Ser honesta mas persuasiva
5. Usar linguagem elegante mas acess√≠vel`;
      
      const response = await this.api.post('/chat/completions', {
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: 'Voc√™ √© um redator especializado em im√≥veis de alto padr√£o.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.8,
        max_tokens: 300
      });
      
      return response.data.choices[0].message.content;
    } catch (error) {
      console.error('Erro ao gerar descri√ß√£o:', error);
      return property.description;
    }
  }
  
  // Gerar sugest√µes personalizadas
  async generatePersonalizedSuggestions(userProfile, availableProperties) {
    try {
      if (!this.apiKey) return null;
      
      const prompt = `Baseado no perfil do cliente e nos im√≥veis dispon√≠veis, sugira os 3 melhores:
      
Perfil do Cliente:
${JSON.stringify(userProfile, null, 2)}

Im√≥veis Dispon√≠veis:
${availableProperties.map(p => `- ${p.title}: ${p.bedrooms} quartos, ${p.area}m¬≤, R$ ${p.price.toLocaleString('pt-BR')}`).join('\n')}

Forne√ßa:
1. Os 3 im√≥veis mais adequados com justificativa
2. Um argumento de venda personalizado para cada um
3. Ordem de prioridade para apresenta√ß√£o`;
      
      const response = await this.api.post('/chat/completions', {
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: this.systemPrompt },
          { role: 'user', content: prompt }
        ],
        temperature: 0.6,
        max_tokens: 500
      });
      
      return response.data.choices[0].message.content;
    } catch (error) {
      console.error('Erro ao gerar sugest√µes:', error);
      return null;
    }
  }
  
  // Responder perguntas sobre a regi√£o
  async answerLocationQuestion(question) {
    try {
      if (!this.apiKey) {
        return 'Desculpe, n√£o consegui processar sua pergunta no momento.';
      }
      
      const prompt = `Responda esta pergunta sobre a regi√£o de Florian√≥polis/Balne√°rio Cambori√∫:
      
"${question}"

Forne√ßa informa√ß√µes precisas e √∫teis sobre:
- Caracter√≠sticas do local
- Infraestrutura
- Pontos de interesse
- Perfil dos moradores
- Valoriza√ß√£o imobili√°ria
- Pr√≥s e contras

Seja objetivo mas completo.`;
      
      const response = await this.api.post('/chat/completions', {
        model: 'gpt-3.5-turbo',
        messages: [
          { 
            role: 'system', 
            content: 'Voc√™ √© um especialista em im√≥veis da regi√£o de Florian√≥polis e Balne√°rio Cambori√∫ com 15 anos de experi√™ncia.' 
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.5,
        max_tokens: 400
      });
      
      return response.data.choices[0].message.content;
    } catch (error) {
      console.error('Erro ao responder pergunta:', error);
      return 'Desculpe, n√£o consegui processar sua pergunta no momento.';
    }
  }
  
  // Construir contexto da conversa
  buildConversationContext(userId, userMessage, botResponse) {
    const messages = [
      { role: 'system', content: this.systemPrompt }
    ];
    
    // Adicionar hist√≥rico se existir
    if (this.conversationCache.has(userId)) {
      const history = this.conversationCache.get(userId);
      // Pegar apenas as √∫ltimas 5 intera√ß√µes
      const recentHistory = history.slice(-10);
      messages.push(...recentHistory);
    }
    
    // Adicionar mensagem atual
    messages.push(
      { role: 'user', content: userMessage },
      { 
        role: 'assistant', 
        content: `Resposta atual do bot: ${botResponse}\n\nPor favor, melhore esta resposta mantendo a mesma inten√ß√£o mas tornando-a mais natural, amig√°vel e persuasiva.` 
      }
    );
    
    return messages;
  }
  
  // Atualizar cache de conversa
  updateConversationCache(userId, userMessage, assistantResponse) {
    if (!this.conversationCache.has(userId)) {
      this.conversationCache.set(userId, []);
    }
    
    const history = this.conversationCache.get(userId);
    history.push(
      { role: 'user', content: userMessage },
      { role: 'assistant', content: assistantResponse }
    );
    
    // Limitar hist√≥rico para economizar tokens
    if (history.length > 20) {
      history.splice(0, history.length - 20);
    }
  }
  
  // Limpar cache de conversa antiga (chamar periodicamente)
  cleanOldConversations() {
    const now = Date.now();
    for (const [userId, data] of this.conversationCache.entries()) {
      if (now - data.lastUpdate > 3600000) { // 1 hora
        this.conversationCache.delete(userId);
      }
    }
  }
}

module.exports = new OpenAIService();